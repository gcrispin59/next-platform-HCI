import sgMail from '@sendgrid/mail';\nimport { config } from 'dotenv';\n\nconfig();\n\nsgMail.setApiKey(process.env.SENDGRID_API_KEY);\n\n/**\n * SendGrid Test Script\n * Tests email integration and template functionality\n */\n\nconst TEST_RECIPIENT = process.env.TEST_EMAIL || 'your-test-email@example.com';\n\nasync function testBasicEmail() {\n  console.log('üß™ Testing basic email sending...');\n  \n  const msg = {\n    to: TEST_RECIPIENT,\n    from: {\n      email: process.env.SENDGRID_FROM_EMAIL || 'noreply@hci-forms.netlify.app',\n      name: process.env.SENDGRID_FROM_NAME || 'HCI-Forms Platform'\n    },\n    subject: 'HCI-Forms SendGrid Integration Test',\n    text: 'This is a test email from the HCI-Forms platform to verify SendGrid integration.',\n    html: `\n      <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">\n        <div style=\"background: #1f2937; color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0;\">\n          <h1>üéâ SendGrid Integration Test</h1>\n        </div>\n        <div style=\"background: #f9fafb; padding: 20px; border-radius: 0 0 8px 8px; border: 1px solid #e5e7eb;\">\n          <p>If you receive this email, your SendGrid integration is working correctly!</p>\n          <div style=\"background: white; padding: 15px; border-radius: 6px; margin: 15px 0;\">\n            <h3>Test Details:</h3>\n            <ul>\n              <li><strong>Platform:</strong> HCI-Forms</li>\n              <li><strong>Environment:</strong> ${process.env.NODE_ENV || 'development'}</li>\n              <li><strong>Timestamp:</strong> ${new Date().toISOString()}</li>\n              <li><strong>From Email:</strong> ${process.env.SENDGRID_FROM_EMAIL}</li>\n            </ul>\n          </div>\n          <p style=\"color: #10b981; font-weight: bold;\">‚úÖ Email integration is working!</p>\n        </div>\n      </div>\n    `\n  };\n\n  try {\n    const result = await sgMail.send(msg);\n    console.log('‚úÖ Basic email sent successfully!');\n    console.log('üìß Message ID:', result[0].headers['x-message-id']);\n    return result;\n  } catch (error) {\n    console.error('‚ùå Basic email sending failed:', error);\n    if (error.response) {\n      console.error('Response body:', error.response.body);\n    }\n    throw error;\n  }\n}\n\nasync function testTemplateEmail() {\n  console.log('üß™ Testing template email...');\n  \n  // Test data for template\n  const templateData = {\n    firstName: 'John',\n    lastName: 'Doe',\n    participantId: 'P000001',\n    enrollmentDate: new Date().toLocaleDateString(),\n    careAdvisor: 'Dr. Sarah Johnson',\n    supportEmail: process.env.ADMIN_EMAIL || 'support@hci-forms.com',\n    supportPhone: '(919) 555-0123',\n    portalUrl: process.env.NEXT_PUBLIC_APP_URL || 'https://hci-forms.netlify.app'\n  };\n\n  const msg = {\n    to: TEST_RECIPIENT,\n    from: {\n      email: process.env.SENDGRID_FROM_EMAIL || 'noreply@hci-forms.netlify.app',\n      name: process.env.SENDGRID_FROM_NAME || 'HCI-Forms Platform'\n    },\n    templateId: process.env.SENDGRID_TEMPLATE_WELCOME,\n    dynamicTemplateData: templateData\n  };\n\n  try {\n    if (!process.env.SENDGRID_TEMPLATE_WELCOME) {\n      console.log('‚ö†Ô∏è  No welcome template ID configured, skipping template test');\n      return;\n    }\n    \n    const result = await sgMail.send(msg);\n    console.log('‚úÖ Template email sent successfully!');\n    console.log('üìß Message ID:', result[0].headers['x-message-id']);\n    return result;\n  } catch (error) {\n    console.error('‚ùå Template email sending failed:', error);\n    if (error.response) {\n      console.error('Response body:', error.response.body);\n    }\n    throw error;\n  }\n}\n\nasync function testARMSSubmissionEmail() {\n  console.log('üß™ Testing ARMS submission email...');\n  \n  const xmlContent = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<ARMSSubmission xmlns=\"http://nc.gov/arms/hci-cds/v1.0\" version=\"1.0\" submissionType=\"ParticipantEnrollment\">\n  <SubmissionHeader>\n    <SubmissionId>HCI-SUB-TEST-${Date.now()}</SubmissionId>\n    <SubmissionDate>${new Date().toISOString()}</SubmissionDate>\n    <SourceSystem>HCI-Forms</SourceSystem>\n    <Version>1.0.0</Version>\n  </SubmissionHeader>\n  <ParticipantInformation>\n    <PersonalDetails>\n      <FirstName>Test</FirstName>\n      <LastName>Participant</LastName>\n    </PersonalDetails>\n  </ParticipantInformation>\n</ARMSSubmission>`;\n\n  const fileName = `HCI-ParticipantEnrollment-${new Date().toISOString().split('T')[0]}-TEST.xml`;\n\n  const msg = {\n    to: process.env.ARMS_EMAIL_RECIPIENT || 'test-arms@example.com',\n    cc: process.env.ADMIN_EMAIL,\n    from: {\n      email: process.env.SENDGRID_FROM_EMAIL || 'noreply@hci-forms.netlify.app',\n      name: process.env.SENDGRID_FROM_NAME || 'HCI-Forms Platform'\n    },\n    subject: `[TEST] HCI-CDS ParticipantEnrollment Submission - ${new Date().toLocaleDateString()}`,\n    text: `Test ARMS submission from HCI-Forms platform.\\n\\nThis is a test message to verify email delivery to the ARMS system.\\n\\nPlease disregard this submission.`,\n    html: `\n      <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">\n        <div style=\"background: #dc2626; color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0;\">\n          <h1>‚ö†Ô∏è TEST SUBMISSION</h1>\n          <p>This is a test - please disregard</p>\n        </div>\n        <div style=\"background: #f9fafb; padding: 20px; border-radius: 0 0 8px 8px; border: 1px solid #e5e7eb;\">\n          <h3>Test ARMS Submission</h3>\n          <p>This is a test email to verify connectivity between the HCI-Forms platform and the NC ARMS email system.</p>\n          <div style=\"background: white; padding: 15px; border-radius: 6px; margin: 15px 0;\">\n            <h4>Submission Details:</h4>\n            <ul>\n              <li><strong>Type:</strong> ParticipantEnrollment (TEST)</li>\n              <li><strong>Date:</strong> ${new Date().toLocaleString()}</li>\n              <li><strong>Source:</strong> HCI-Forms Platform</li>\n              <li><strong>Environment:</strong> ${process.env.NODE_ENV || 'test'}</li>\n            </ul>\n          </div>\n          <p style=\"color: #dc2626; font-weight: bold;\">‚ö†Ô∏è THIS IS A TEST - PLEASE DISREGARD</p>\n        </div>\n      </div>\n    `,\n    attachments: [\n      {\n        content: Buffer.from(xmlContent, 'utf8').toString('base64'),\n        filename: fileName,\n        type: 'application/xml',\n        disposition: 'attachment'\n      }\n    ]\n  };\n\n  try {\n    const result = await sgMail.send(msg);\n    console.log('‚úÖ ARMS submission email sent successfully!');\n    console.log('üìß Message ID:', result[0].headers['x-message-id']);\n    console.log('üìé Attachment:', fileName);\n    return result;\n  } catch (error) {\n    console.error('‚ùå ARMS submission email failed:', error);\n    if (error.response) {\n      console.error('Response body:', error.response.body);\n    }\n    throw error;\n  }\n}\n\nasync function testEmailVerification() {\n  console.log('üß™ Testing email verification...');\n  \n  try {\n    // Test API key validity\n    const response = await fetch('https://api.sendgrid.com/v3/user/profile', {\n      headers: {\n        'Authorization': `Bearer ${process.env.SENDGRID_API_KEY}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    \n    if (response.ok) {\n      const profile = await response.json();\n      console.log('‚úÖ API key is valid');\n      console.log('üìß Account email:', profile.email);\n      console.log('üè¢ Company:', profile.company);\n    } else {\n      console.error('‚ùå API key validation failed:', response.status, response.statusText);\n    }\n    \n    // Test sender verification\n    const sendersResponse = await fetch('https://api.sendgrid.com/v3/verified_senders', {\n      headers: {\n        'Authorization': `Bearer ${process.env.SENDGRID_API_KEY}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    \n    if (sendersResponse.ok) {\n      const senders = await sendersResponse.json();\n      console.log('‚úÖ Verified senders retrieved');\n      console.log('üìÆ Verified senders:', senders.results?.map(s => s.from_email) || []);\n    }\n    \n  } catch (error) {\n    console.error('‚ùå Email verification failed:', error);\n  }\n}\n\nasync function runAllTests() {\n  console.log('üöÄ Starting SendGrid integration tests...\\n');\n  \n  // Check environment variables\n  const requiredVars = ['SENDGRID_API_KEY', 'SENDGRID_FROM_EMAIL'];\n  const missingVars = requiredVars.filter(varName => !process.env[varName]);\n  \n  if (missingVars.length > 0) {\n    console.error('‚ùå Missing required environment variables:', missingVars);\n    console.error('Please ensure all required variables are set in your .env file');\n    process.exit(1);\n  }\n  \n  try {\n    await testEmailVerification();\n    console.log();\n    \n    await testBasicEmail();\n    console.log();\n    \n    await testTemplateEmail();\n    console.log();\n    \n    if (process.env.NODE_ENV !== 'production') {\n      await testARMSSubmissionEmail();\n      console.log();\n    } else {\n      console.log('‚ö†Ô∏è  Skipping ARMS test in production environment');\n    }\n    \n    console.log('üéâ All SendGrid tests completed successfully!');\n    console.log('\\nüìã Next steps:');\n    console.log('1. Check your email inbox for test messages');\n    console.log('2. Verify email templates are working correctly');\n    console.log('3. Update ARMS_EMAIL_RECIPIENT with actual NC ARMS email');\n    console.log('4. Configure domain authentication for better deliverability');\n    \n  } catch (error) {\n    console.error('\\nüí• Tests failed:', error.message);\n    process.exit(1);\n  }\n}\n\n// Run tests if called directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  runAllTests();\n}\n\nexport {\n  testBasicEmail,\n  testTemplateEmail,\n  testARMSSubmissionEmail,\n  testEmailVerification,\n  runAllTests\n};\n"