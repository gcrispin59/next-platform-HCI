import crypto from 'crypto';\nimport { EmailService } from '../../lib/services/email-service.js';\n\n/**\n * SendGrid Webhook Handler\n * Processes email events from SendGrid (delivered, opened, clicked, bounced, etc.)\n */\n\nexport async function handler(event, context) {\n  const headers = {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Headers': 'Content-Type, X-Webhook-Signature',\n    'Access-Control-Allow-Methods': 'POST, OPTIONS',\n    'Content-Type': 'application/json'\n  };\n\n  // Handle preflight requests\n  if (event.httpMethod === 'OPTIONS') {\n    return {\n      statusCode: 200,\n      headers,\n      body: ''\n    };\n  }\n\n  // Only allow POST requests\n  if (event.httpMethod !== 'POST') {\n    return {\n      statusCode: 405,\n      headers,\n      body: JSON.stringify({ error: 'Method not allowed' })\n    };\n  }\n\n  try {\n    // Verify webhook signature (if configured)\n    if (process.env.SENDGRID_WEBHOOK_SECRET) {\n      const isValid = verifyWebhookSignature(\n        event.body,\n        event.headers['x-webhook-signature'] || '',\n        process.env.SENDGRID_WEBHOOK_SECRET\n      );\n      \n      if (!isValid) {\n        console.error('Invalid webhook signature');\n        return {\n          statusCode: 401,\n          headers,\n          body: JSON.stringify({ error: 'Invalid signature' })\n        };\n      }\n    }\n\n    const events = JSON.parse(event.body || '[]');\n    console.log(`Processing ${events.length} SendGrid events`);\n\n    const processedEvents = [];\n    const errors = [];\n\n    for (const eventData of events) {\n      try {\n        const processedEvent = await processEmailEvent(eventData);\n        processedEvents.push(processedEvent);\n        \n        console.log('Processed email event:', {\n          email: eventData.email,\n          event: eventData.event,\n          timestamp: eventData.timestamp,\n          sg_message_id: eventData.sg_message_id\n        });\n      } catch (error) {\n        console.error('Error processing event:', error);\n        errors.push({\n          event: eventData,\n          error: error.message\n        });\n      }\n    }\n\n    // Update email analytics\n    await updateEmailAnalytics(processedEvents);\n\n    return {\n      statusCode: 200,\n      headers,\n      body: JSON.stringify({\n        success: true,\n        processed: processedEvents.length,\n        errors: errors.length,\n        message: `Processed ${processedEvents.length} events with ${errors.length} errors`\n      })\n    };\n  } catch (error) {\n    console.error('Webhook processing error:', error);\n    \n    return {\n      statusCode: 500,\n      headers,\n      body: JSON.stringify({\n        success: false,\n        error: 'Internal server error',\n        message: error.message\n      })\n    };\n  }\n}\n\n/**\n * Verify SendGrid webhook signature\n */\nfunction verifyWebhookSignature(payload, signature, secret) {\n  try {\n    const expectedSignature = crypto\n      .createHmac('sha256', secret)\n      .update(payload, 'utf8')\n      .digest('base64');\n    \n    return crypto.timingSafeEqual(\n      Buffer.from(signature),\n      Buffer.from(expectedSignature)\n    );\n  } catch (error) {\n    console.error('Signature verification error:', error);\n    return false;\n  }\n}\n\n/**\n * Process individual email event\n */\nasync function processEmailEvent(eventData) {\n  const {\n    email,\n    event,\n    timestamp,\n    sg_message_id,\n    sg_event_id,\n    useragent,\n    ip,\n    url,\n    reason,\n    status,\n    response,\n    attempt,\n    category,\n    type\n  } = eventData;\n\n  const processedEvent = {\n    email,\n    event,\n    timestamp: new Date(timestamp * 1000), // Convert Unix timestamp\n    sg_message_id,\n    sg_event_id,\n    metadata: {\n      useragent,\n      ip,\n      url,\n      reason,\n      status,\n      response,\n      attempt,\n      category,\n      type\n    }\n  };\n\n  // Update database record\n  await updateEmailCommunicationStatus(processedEvent);\n\n  // Handle specific event types\n  switch (event) {\n    case 'delivered':\n      await handleDeliveredEvent(processedEvent);\n      break;\n    case 'opened':\n      await handleOpenedEvent(processedEvent);\n      break;\n    case 'clicked':\n      await handleClickedEvent(processedEvent);\n      break;\n    case 'bounce':\n    case 'blocked':\n    case 'dropped':\n      await handleBouncedEvent(processedEvent);\n      break;\n    case 'spamreport':\n      await handleSpamReportEvent(processedEvent);\n      break;\n    case 'unsubscribe':\n      await handleUnsubscribeEvent(processedEvent);\n      break;\n    case 'group_unsubscribe':\n      await handleGroupUnsubscribeEvent(processedEvent);\n      break;\n    default:\n      console.log('Unknown event type:', event);\n  }\n\n  return processedEvent;\n}\n\n/**\n * Update email communication status in database\n */\nasync function updateEmailCommunicationStatus(eventData) {\n  try {\n    // In production, this would update the email_communications table\n    console.log('Updating email status:', {\n      messageId: eventData.sg_message_id,\n      event: eventData.event,\n      timestamp: eventData.timestamp\n    });\n    \n    // TODO: Implement database update\n    // UPDATE email_communications \n    // SET status = ?, event_data = ?, updated_at = NOW()\n    // WHERE message_id = ?\n    \n  } catch (error) {\n    console.error('Database update error:', error);\n    throw error;\n  }\n}\n\n/**\n * Handle delivered email events\n */\nasync function handleDeliveredEvent(eventData) {\n  console.log(`Email delivered to ${eventData.email}`);\n  \n  // Update delivery statistics\n  await updateDeliveryStats('delivered');\n}\n\n/**\n * Handle email opened events\n */\nasync function handleOpenedEvent(eventData) {\n  console.log(`Email opened by ${eventData.email}`);\n  \n  // Update open statistics\n  await updateDeliveryStats('opened');\n  \n  // Track user engagement\n  await trackUserEngagement(eventData.email, 'email_opened');\n}\n\n/**\n * Handle email clicked events\n */\nasync function handleClickedEvent(eventData) {\n  console.log(`Email link clicked by ${eventData.email}:`, eventData.metadata.url);\n  \n  // Update click statistics\n  await updateDeliveryStats('clicked');\n  \n  // Track user engagement\n  await trackUserEngagement(eventData.email, 'email_clicked', {\n    url: eventData.metadata.url\n  });\n}\n\n/**\n * Handle bounced/blocked/dropped email events\n */\nasync function handleBouncedEvent(eventData) {\n  console.log(`Email ${eventData.event} for ${eventData.email}:`, eventData.metadata.reason);\n  \n  // Update bounce statistics\n  await updateDeliveryStats('bounced');\n  \n  // Add to suppression list if hard bounce\n  if (eventData.metadata.type === 'bounce' && eventData.metadata.reason?.includes('permanent')) {\n    await addToSuppressionList(eventData.email, 'hard_bounce', eventData.metadata.reason);\n  }\n  \n  // Send alert for high bounce rates\n  await checkBounceRateAlert();\n}\n\n/**\n * Handle spam report events\n */\nasync function handleSpamReportEvent(eventData) {\n  console.log(`Spam report from ${eventData.email}`);\n  \n  // Update spam statistics\n  await updateDeliveryStats('spam');\n  \n  // Add to suppression list\n  await addToSuppressionList(eventData.email, 'spam_report', 'User reported as spam');\n  \n  // Send alert for spam reports\n  await sendAdminAlert('spam_report', {\n    email: eventData.email,\n    timestamp: eventData.timestamp\n  });\n}\n\n/**\n * Handle unsubscribe events\n */\nasync function handleUnsubscribeEvent(eventData) {\n  console.log(`Unsubscribe from ${eventData.email}`);\n  \n  // Add to suppression list\n  await addToSuppressionList(eventData.email, 'unsubscribe', 'User unsubscribed');\n  \n  // Update user preferences\n  await updateUserEmailPreferences(eventData.email, { unsubscribed: true });\n}\n\n/**\n * Handle group unsubscribe events\n */\nasync function handleGroupUnsubscribeEvent(eventData) {\n  console.log(`Group unsubscribe from ${eventData.email}`);\n  \n  // Update user preferences for specific group\n  await updateUserEmailPreferences(eventData.email, {\n    groupUnsubscribes: [eventData.metadata.category]\n  });\n}\n\n/**\n * Update delivery statistics\n */\nasync function updateDeliveryStats(eventType) {\n  try {\n    // In production, this would update statistics tables\n    console.log('Updating delivery stats:', eventType);\n    \n    // TODO: Implement statistics tracking\n    // INSERT INTO email_stats (event_type, count, date) \n    // VALUES (?, 1, CURRENT_DATE)\n    // ON CONFLICT (event_type, date) \n    // DO UPDATE SET count = email_stats.count + 1\n    \n  } catch (error) {\n    console.error('Stats update error:', error);\n  }\n}\n\n/**\n * Track user engagement\n */\nasync function trackUserEngagement(email, action, metadata = {}) {\n  try {\n    console.log('Tracking user engagement:', { email, action, metadata });\n    \n    // TODO: Implement user engagement tracking\n    // INSERT INTO user_engagement (email, action, metadata, timestamp)\n    // VALUES (?, ?, ?, NOW())\n    \n  } catch (error) {\n    console.error('Engagement tracking error:', error);\n  }\n}\n\n/**\n * Add email to suppression list\n */\nasync function addToSuppressionList(email, reason, details) {\n  try {\n    console.log('Adding to suppression list:', { email, reason, details });\n    \n    // TODO: Implement suppression list management\n    // INSERT INTO email_suppressions (email, reason, details, created_at)\n    // VALUES (?, ?, ?, NOW())\n    // ON CONFLICT (email) DO UPDATE SET \n    // reason = EXCLUDED.reason, details = EXCLUDED.details, updated_at = NOW()\n    \n  } catch (error) {\n    console.error('Suppression list error:', error);\n  }\n}\n\n/**\n * Update user email preferences\n */\nasync function updateUserEmailPreferences(email, preferences) {\n  try {\n    console.log('Updating email preferences:', { email, preferences });\n    \n    // TODO: Implement user preferences update\n    // UPDATE users SET email_preferences = ? WHERE email = ?\n    \n  } catch (error) {\n    console.error('Preferences update error:', error);\n  }\n}\n\n/**\n * Check bounce rate and send alerts if too high\n */\nasync function checkBounceRateAlert() {\n  try {\n    // TODO: Implement bounce rate monitoring\n    // Calculate bounce rate over last 24 hours\n    // If > 5%, send alert to administrators\n    \n  } catch (error) {\n    console.error('Bounce rate check error:', error);\n  }\n}\n\n/**\n * Send alert to administrators\n */\nasync function sendAdminAlert(type, data) {\n  try {\n    console.log('Sending admin alert:', { type, data });\n    \n    if (process.env.ADMIN_EMAIL) {\n      await EmailService.sendNotification(\n        process.env.ADMIN_EMAIL,\n        `HCI-Forms Email Alert: ${type}`,\n        `An email event requires attention:\\n\\nType: ${type}\\nData: ${JSON.stringify(data, null, 2)}\\n\\nPlease review the email logs for more details.`\n      );\n    }\n  } catch (error) {\n    console.error('Admin alert error:', error);\n  }\n}\n\n/**\n * Update email analytics dashboard\n */\nasync function updateEmailAnalytics(events) {\n  try {\n    const analytics = {\n      delivered: events.filter(e => e.event === 'delivered').length,\n      opened: events.filter(e => e.event === 'opened').length,\n      clicked: events.filter(e => e.event === 'clicked').length,\n      bounced: events.filter(e => ['bounce', 'blocked', 'dropped'].includes(e.event)).length,\n      spam: events.filter(e => e.event === 'spamreport').length,\n      unsubscribed: events.filter(e => ['unsubscribe', 'group_unsubscribe'].includes(e.event)).length\n    };\n    \n    console.log('Email analytics update:', analytics);\n    \n    // TODO: Update analytics dashboard\n    // INSERT INTO email_analytics (date, delivered, opened, clicked, bounced, spam, unsubscribed)\n    // VALUES (CURRENT_DATE, ?, ?, ?, ?, ?, ?)\n    // ON CONFLICT (date) DO UPDATE SET\n    // delivered = email_analytics.delivered + EXCLUDED.delivered,\n    // opened = email_analytics.opened + EXCLUDED.opened,\n    // clicked = email_analytics.clicked + EXCLUDED.clicked,\n    // bounced = email_analytics.bounced + EXCLUDED.bounced,\n    // spam = email_analytics.spam + EXCLUDED.spam,\n    // unsubscribed = email_analytics.unsubscribed + EXCLUDED.unsubscribed\n    \n  } catch (error) {\n    console.error('Analytics update error:', error);\n  }\n}\n"